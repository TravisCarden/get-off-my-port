#!/bin/bash

# get-off-my-port - Find and kill processes listening on a given port.
# Website: https://github.com/TravisCarden/get-off-my-port
# License: MIT License
#
# This script finds and kills any processes that are listening on a port or just
# shows information about them.
#
# Usage:
#   get-off-my-port [OPTIONS] [PORT]
#
# Run 'get-off-my-port --help' for more details.

# Exit codes
EXIT_SUCCESS=0
EXIT_ERROR=1

# Script version
SCRIPT_VERSION="0.0.1"

# ANSI color codes
RED='\033[0;31m'
NO_COLOR='\033[0m'

# Print error messages in red.
print_error() {
    echo -e "${RED}Error: $1${NO_COLOR}" >&2
}

# Validate that the given port is valid.
validate_port() {
    local port=$1
    if [[ ! $port =~ ^[0-9]+$ ]] || ((port < 1 || port > 65535)); then
        print_error "Invalid port '$port'. Port must be a number between 1 and 65535."
        exit $EXIT_ERROR
    fi
}

# Check if necessary commands are available (lsof and ps).
check_dependencies() {
    if ! command -v lsof &>/dev/null; then
        print_error "'lsof' command is not available. Please install it to use this script."
        exit $EXIT_ERROR
    fi
    if ! command -v ps &>/dev/null; then
        print_error "'ps' command is not available. Please install it to use this script."
        exit $EXIT_ERROR
    fi
}

# Process the given port: either show info or kill processes.
process_port() {
    local port=$1
    local mode=$2
    local force=$3

    # Get the process IDs (PIDs) of processes listening on the given port.
    local pids
    pids=$(lsof -ti :"$port")

    # If no processes are found, exit with a success message.
    if [[ -z $pids ]]; then
        echo "No processes are currently listening on port $port."
        exit $EXIT_SUCCESS
    fi

    # Show info about the processes.
    if [[ $mode == "info" ]]; then
        echo "Processes listening on port $port:"
        lsof -i :"$port"
        exit $EXIT_SUCCESS
    fi

    # If killing processes, show a warning and ask for confirmation unless forced.
    echo "Processes listening on port $port:"
    lsof -i :"$port"
    if [[ $force -eq 0 ]]; then
        echo -n "Do you want to kill these processes? (y/N) "
        read -r confirmation
        case $confirmation in
            [yY][eE][sS]|[yY]) ;;
            *)
                echo "Aborted. No processes were killed."
                exit $EXIT_SUCCESS
                ;;
        esac
    fi

    # Kill the processes.
    echo "Killing processes listening on port $port:"
    local killed_count=0
    while read -r pid; do
        if [[ -n $pid ]]; then
            local cmd
            cmd=$(ps -p "$pid" -o comm= 2>/dev/null)
            if [[ -z $cmd ]]; then
                echo "Process with PID $pid no longer exists."
            else
                echo "Killing '$cmd' (PID $pid)."
                if kill -TERM "$pid" 2>/dev/null; then
                    ((killed_count++))
                else
                    print_error "Failed to kill PID $pid. You may need elevated permissions."
                    exit $EXIT_ERROR
                fi
            fi
        fi
    done <<<"$pids"
    echo "Successfully killed $killed_count process(es)."
    exit $EXIT_SUCCESS
}

# Display the help message with usage instructions.
print_help() {
    cat <<EOF
Usage: get-off-my-port [OPTIONS] [PORT]

A utility to find and kill all processes listening on a given port.

Options:
  -h, --help     Show this help message and exit.
  -v, --version  Show the version of this script.
  -i, --info     List processes listening on the specified port without killing them.
  -f, --force    Kill processes without confirmation.

Environment Variable:
  GET_OFF_MY_PORT_DEFAULT_PORT  The default port to use when no port argument is provided.

Examples:
  get-off-my-port 42          Kill processes listening on port 42 with confirmation.
  get-off-my-port --force 42  Kill processes on port 42 without confirmation.
  get-off-my-port --info 42   List processes listening on port 42 but don't kill them.
  get-off-my-port             Use the default port set in GET_OFF_MY_PORT_DEFAULT_PORT.

EOF
}

# Print the version of the script.
print_version() {
    echo "get-off-my-port $SCRIPT_VERSION https://github.com/TravisCarden/get-off-my-port"
}

# Main entry point of the script.
main() {
    check_dependencies

    local port
    local mode="kill"
    local force=0

    # Parse command-line arguments.
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                print_help
                exit $EXIT_SUCCESS
                ;;
            -v|--version)
                print_version
                exit $EXIT_SUCCESS
                ;;
            -i|--info)
                mode="info"
                shift
                ;;
            -f|--force)
                force=1
                shift
                ;;
            -*)
                print_error "Error: Unknown option '$1'." >&2
                echo
                print_help
                exit $EXIT_ERROR
                ;;
            *)
                if [[ -z $port ]]; then
                    port=$1
                else
                    print_error "Unexpected argument '$1'."
                    echo
                    print_help
                    exit $EXIT_ERROR
                fi
                shift
                ;;
        esac
    done

    # If no port argument is provided, use the default port if set.
    if [[ -z $port ]]; then
        port=${GET_OFF_MY_PORT_DEFAULT_PORT}
        if [[ -z $port ]]; then
            print_error "No port specified and no default port set."
            echo
            print_help
            exit $EXIT_ERROR
        fi
    fi

    validate_port "$port"
    process_port "$port" "$mode" "$force"
}

# Run the script.
main "$@"
